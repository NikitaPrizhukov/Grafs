#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

//нахождение конмпонентов сильной связности

void quicksort(vector<vector<int>>& mas, int first, int last)
{
	int mid;
	int count;
	int f = first, l = last;
	mid = mas[(f + l) / 2][0];
	do
	{
		while (mas[f][0] < mid) f++;
		while (mas[l][0] > mid) l--;
		if (f <= l) {
			swap(mas[f], mas[l]);
			f++;
			l--;
		}
	} while (f < l);
	if (first < l) quicksort(mas, first, l);
	if (f < last) quicksort(mas, f, last);
}

bool findTime(vector<vector<int>>& mas, vector<int>& backInTime, vector<int>& flag, int root, int& time) {

	for (size_t i = 0; i < mas[root].size(); i++) {

		if (flag[mas[root][i]] == 0) {
			flag[mas[root][i]] = 1;
			findTime(mas, backInTime, flag, mas[root][i], time);
		}
	}
	backInTime[time] = root;
	time--;

	return true;
}

bool strongLink(vector<vector<int>>& mas, vector<vector<int>>& an, vector<int>& flag, int root) {

	for (size_t i = 0; i < mas[root].size(); i++) {

		if (flag[mas[root][i]] == 1) {
			flag[mas[root][i]] = 2;
			an[an.size() - 1].push_back(mas[root][i] + 1);
			strongLink(mas, an, flag, mas[root][i]);
		}
	}

	return true;
}


int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int count;
	cin >> count;

	int len;
	cin >> len;

	if (count == 1) {
		cout << 1 << endl << 1;
		return 0;
	}


	vector<vector<int>> mas(count);
	vector<vector<int>> masobr(count);
	vector<int> backInTime(count);
	vector<int> flag(count);

	for (size_t i = 0; i < flag.size(); i++) {
		flag[i] = 0;
	}

	for (int i = 0; i < len; i++) {

		int a, b;
		cin >> a >> b;

		mas[a - 1].push_back(b - 1);
		masobr[b - 1].push_back(a - 1);
	}

	vector<vector<int>> an;
	int time = count - 1;

	for (int i = count - 1; i > -1; i--) {

		if (flag[i] == 0) {
			flag[i] = 1;
			findTime(masobr, backInTime, flag, i, time);
		}
	}

	for (int i = 0; i < backInTime.size(); i++) {

		if (flag[backInTime[i]] == 1) {
			flag[backInTime[i]] = 2;
			an.push_back(vector<int>());
			an[an.size() - 1].push_back(backInTime[i] + 1);
			strongLink(mas, an, flag, backInTime[i]);
			sort(an[an.size() - 1].begin(), an[an.size() - 1].end());
		}
	}


	cout << an.size() << endl;
	quicksort(an, 0, an.size() - 1);

	for (size_t i = 0; i < an.size(); i++) {
		for (size_t f = 0; f < an[i].size(); f++) {
			cout << an[i][f] << " ";
		}
		cout << endl;
	}

	return 0;
}
